package com.bhargey.frauddetectionapi.controller;

import com.bhargey.frauddetectionapi.dto.TransactionRequest;
import com.bhargey.frauddetectionapi.service.FraudDetectionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/fraud")
@CrossOrigin(origins = "*")
public class FraudDetectionController {

    @Autowired
    private FraudDetectionService fraudDetectionService;

    @PostMapping("/check")
    public ResponseEntity<Map<String, Object>> checkTransaction(@RequestBody TransactionRequest transactionRequest) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            // Validate input
            if (transactionRequest.getAmount() == null || transactionRequest.getHourOfDay() == null) {
                response.put("error", "Amount and hourOfDay are required fields");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (transactionRequest.getAmount() < 0) {
                response.put("error", "Amount must be a positive value");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (transactionRequest.getHourOfDay() < 0 || transactionRequest.getHourOfDay() > 23) {
                response.put("error", "hourOfDay must be between 0 and 23");
                return ResponseEntity.badRequest().body(response);
            }
            
            boolean isFraud = fraudDetectionService.isFraudulent(transactionRequest);
            
            if (isFraud) {
                response.put("result", "FRAUD_DETECTED");
                response.put("message", "This transaction is highly likely to be fraudulent.");
                response.put("confidence", 0.95);
            } else {
                response.put("result", "LEGITIMATE");
                response.put("message", "This transaction appears to be legitimate.");
                response.put("confidence", 0.15);
            }
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("error", "An internal server error occurred");
            response.put("details", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
    
    @GetMapping("/health")
    public ResponseEntity<Map<String, String>> healthCheck() {
        Map<String, String> response = new HashMap<>();
        response.put("status", "UP");
        response.put("message", "Fraud Detection API is running");
        return ResponseEntity.ok(response);
    }
}